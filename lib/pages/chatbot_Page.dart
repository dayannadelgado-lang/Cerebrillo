// ignore: file_names
// ignore: file_names
// ignore: file_names
//ignore 
// ignore_for_file: file_names, duplicate_ignore, deprecated_member_use

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'dart:math';

class ChatBotPage extends StatefulWidget {
  const ChatBotPage({super.key});

  @override
  State<ChatBotPage> createState() => _ChatBotPageState();
}

class _ChatBotPageState extends State<ChatBotPage> with TickerProviderStateMixin {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<_ChatMessage> _messages = [];
  Color _selectedColor = Colors.purpleAccent;
  Gradient _selectedGradient = LinearGradient(colors: [Colors.pink, Colors.purple]);
  bool _showColorPicker = false;

  bool _awaitingReason = false;
  bool _awaitingCategory = false;
  String _currentEmotion = "";

  late AnimationController _lottieController;

  // Opciones de colores predefinidas
  final List<Color> predefinedColors = [
    Colors.red, Colors.blue, Colors.green, // normales
    Colors.pink[200]!, Colors.lightBlue[200]!, // pasteles
  ];

  final List<Gradient> predefinedGradients = [
    LinearGradient(colors: [Colors.red, Colors.orange]), // normal
    LinearGradient(colors: [Colors.blue, Colors.green]), // normal
    LinearGradient(colors: [Colors.purple, Colors.pink]), // normal
    LinearGradient(colors: [Colors.pink[200]!, Colors.purple[200]!]), // pastel
    LinearGradient(colors: [Colors.lightBlue[200]!, Colors.green[200]!]), // pastel
  ];

  final Map<String, List<String>> emocionesRespuestas = {
    "cansada": [
      "Uf, entiendo que est√©s cansada. A veces todo se acumula y necesitamos un respiro.",
      "Seguro que has trabajado duro hoy. T√≥mate un momento para ti.",
      "Respira hondo, deja que la tensi√≥n se vaya poco a poco.",
      "A veces descansar un rato hace maravillas, mereces ese tiempo.",
      "S√© que los d√≠as largos agotan, pero pronto tendr√°s un momento de calma."
    ],
    "triste": [
      "Vaya, siento que te sientas as√≠. ¬øQuieres contarme qu√© pas√≥?",
      "Est√° bien sentirse mal, todos tenemos d√≠as dif√≠ciles.",
      "No est√°s sola, si quieres puedes hablarme de ello.",
      "A veces expresar lo que sentimos ayuda a aliviar un poco la tristeza.",
      "S√© que es duro ahora, pero esto tambi√©n pasar√°."
    ],
    "enojada": [
      "Entiendo, hay cosas que frustran mucho. Cu√©ntame si quieres.",
      "Respira hondo, a veces dejar salir un poco de enojo ayuda.",
      "No dejes que esto te arruine el d√≠a, puedes manejarlo.",
      "S√© que molesta, t√≥mate un momento para calmarte.",
      "Es normal sentir enojo, pero pronto se sentir√° mejor."
    ],
    "estresada": [
      "Uf, el estr√©s es intenso. Haz una pausa si puedes.",
      "A veces un poco de m√∫sica o respirar profundo ayuda a calmarse.",
      "Todo se puede resolver paso a paso, respira hondo.",
      "No dejes que el estr√©s te domine, intenta relajarte un momento.",
      "T√∫ puedes con esto, un descanso corto puede hacer maravillas."
    ],
    "bien": [
      "Me alegra saber que est√°s bien. ¬øPor qu√© te sientes as√≠ hoy?",
      "¬°Genial! Cu√©ntame, ¬øqu√© ha hecho que te sientas bien?",
      "Qu√© gusto escuchar eso. ¬øQuieres contarme la raz√≥n?",
      "Me alegra que est√©s bien, ¬øqu√© ha pasado para que sea as√≠?",
      "Eso suena muy positivo, ¬øpor qu√© te sientes as√≠ hoy?"
    ],
    "excelente": [
      "¬°Wow! Qu√© alegr√≠a que est√©s excelente. ¬øQu√© pas√≥ para que te sientas as√≠?",
      "Genial escuchar eso, cu√©ntame m√°s sobre por qu√© est√°s tan bien.",
      "¬°Eso es incre√≠ble! ¬øQu√© hizo tu d√≠a tan excelente?",
      "Me encanta tu energ√≠a, ¬øqu√© ha hecho que te sientas as√≠?",
      "Qu√© orgullo escucharlo, cu√©ntame un poco sobre eso."
    ]
  };

  final Map<String, String> cuentos = {
    "fantas√≠a": "En lo profundo del bosque de L√∫minis, los √°rboles hablaban entre s√≠ en un lenguaje que solo los animales escuchaban. Una noche, Lyra, una ni√±a con ojos como la luna, sigui√≥ un rastro de luces danzantes hasta un lago que reflejaba un cielo estrellado diferente al suyo. All√≠ encontr√≥ un peque√±o drag√≥n atrapado en redes de sombras. Con un susurro, Lyra le ense√±√≥ a hablar con las estrellas y, al hacerlo, el drag√≥n se liber√≥ y le regal√≥ una pluma que brillaba con todos los colores del amanecer. Desde entonces, cada vez que Lyra la tocaba, pod√≠a escuchar los secretos del bosque y las estrellas, como si el universo entero le hablara al o√≠do",
    "terror": "Una sombra recorr√≠a el pasillo cada noche. Nadie la ve√≠a a la luz del d√≠a, pero los ruidos manten√≠an a todos despiertos...",
    "aventura": "Un joven navegante emprendi√≥ un viaje hacia la isla desconocida, enfrentando tormentas y criaturas marinas...",
    "amor": "Cada ma√±ana, Mateo ve√≠a a Clara desde su ventana del caf√©. Ella nunca lo miraba, siempre absorta en un cuaderno viejo. Un d√≠a, una hoja se le escap√≥ de sus manos y cay√≥ frente a √©l. Al recogerla, ley√≥: ‚ÄúA veces, el coraz√≥n ve lo que los ojos ignoran.‚Äù Sonri√≥ y decidi√≥ acercarse. Sin palabras, le ofreci√≥ un caf√© y una sonrisa que dur√≥ m√°s que cualquier texto escrito. Desde aquel instante, no necesitaron m√°s que miradas; sus corazones ya hablaban el mismo idioma.",
    "ciencia ficci√≥n": "En un futuro donde los humanos viv√≠an en ciudades flotantes, una cient√≠fica descubri√≥ un portal hacia un universo paralelo...",
    "infantil": "Un conejito curioso decidi√≥ explorar el bosque. Conoci√≥ a amigos como la tortuga sabia, el b√∫ho bromista y la ardilla r√°pida...",
    "inspirador": "Una joven so√±adora enfrentaba cada d√≠a con dudas, pero nunca se rindi√≥. Cada peque√±o paso que daba la acercaba a sus metas..."
  };

  @override
  void initState() {
    super.initState();
    _lottieController =
        AnimationController(vsync: this, duration: const Duration(seconds: 3))..repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    _lottieController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _pickCustomColor() async {
    Color tempColor = _selectedColor;
    Color tempColor2 = tempColor;
    bool isGradient = false;

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Selecciona color o degradado'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              children: [
                const Text("Degradado"),
                Switch(
                  value: isGradient,
                  onChanged: (val) => setState(() => isGradient = val),
                ),
              ],
            ),
            ColorPicker(
              pickerColor: tempColor,
              onColorChanged: (c) => tempColor = c,
              showLabel: true,
              pickerAreaHeightPercent: 0.7,
            ),
            if (isGradient)
              ColorPicker(
                pickerColor: tempColor2,
                onColorChanged: (c) => tempColor2 = c,
                showLabel: true,
                pickerAreaHeightPercent: 0.7,
              ),
            const SizedBox(height: 10),
            const Text("Opciones r√°pidas:"),
            Wrap(
              spacing: 6,
              children: [
                for (var c in predefinedColors)
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedColor = c;
                        _selectedGradient = LinearGradient(colors: [c.withOpacity(0.7), c]);
                        _showColorPicker = false;
                      });
                      Navigator.of(context).pop();
                    },
                    child: Container(width: 30, height: 30, color: c),
                  ),
                for (var g in predefinedGradients)
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedGradient = g;
                        _showColorPicker = false;
                      });
                      Navigator.of(context).pop();
                    },
                    child: Container(
                      width: 30,
                      height: 30,
                      decoration: BoxDecoration(
                        gradient: g,
                      ),
                    ),
                  ),
              ],
            ),
          ],
        ),
        actions: [
          TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('Cancelar')),
          TextButton(
            onPressed: () {
              setState(() {
                if (isGradient) {
                  _selectedGradient = LinearGradient(colors: [tempColor, tempColor2]);
                } else {
                  _selectedColor = tempColor;
                  _selectedGradient = LinearGradient(colors: [tempColor.withOpacity(0.7), tempColor]);
                }
                _showColorPicker = false;
              });
              Navigator.of(context).pop();
            },
            child: const Text('Guardar'),
          ),
        ],
      ),
    );
  }

  Future<String> _generateBotResponse(String userMessage) async {
    String msg = userMessage.toLowerCase().trim();
    final Random rng = Random();

    final saludos = ["hola", "hey", "buenas", "buen d√≠a", "buenas tardes", "buenas noches"];
    for (var saludo in saludos) {
      if (msg.contains(saludo)) {
        return [
          "¬°Hola! üòä ¬øC√≥mo te encuentras hoy?",
          "¬°Hey! Qu√© gusto verte, ¬øc√≥mo va tu d√≠a?",
          "¬°Hola, hola! üå∏ ¬øQu√© tal te sientes?",
          "¬°Buenas! Cu√©ntame, ¬øc√≥mo est√°s?",
          "¬°Qu√© alegr√≠a verte por aqu√≠! üí´ ¬øC√≥mo te va hoy?"
        ][rng.nextInt(5)];
      }
    }

    if (msg == "ok" || msg == "okey") return "¬øDeseas hablar de algo m√°s?";

    if (_awaitingCategory) {
      _awaitingCategory = false;
      final categorias = {
        "1": "fantas√≠a",
        "2": "misterio",
        "3": "terror",
        "4": "aventura",
        "5": "amor",
        "6": "ciencia ficci√≥n",
        "7": "infantil",
        "8": "inspirador",
        "fantas√≠a": "fantas√≠a",
        "misterio": "misterio",
        "terror": "terror",
        "aventura": "aventura",
        "amor": "amor",
        "ciencia ficci√≥n": "ciencia ficci√≥n",
        "infantil": "infantil",
        "inspirador": "inspirador"
      };
      String categoria = categorias[msg] ?? "fantas√≠a";
      return cuentos[categoria]!;
    }

    if (msg.contains("cuento")) {
      _awaitingCategory = true;
      return "¬°Perfecto! üòä ¬øQu√© tipo de cuento te gustar√≠a leer? Puedes escribir el n√∫mero o el nombre:\n\n"
          "1. Fantas√≠a üåå\n2. Misterio üîç\n3. Terror üëª\n4. Aventura üó∫Ô∏è\n5. Amor ‚ù§Ô∏è\n6. Ciencia ficci√≥n ü§ñ\n7. Infantil üê∞\n8. Inspirador üåü";
    }

    if (_awaitingReason && _currentEmotion.isNotEmpty) {
      _awaitingReason = false;
      return "Me alegra que me lo compartas. No est√°s sola en esto, en las buenas y en las malas estar√© üíï";
    }

    for (String emo in emocionesRespuestas.keys) {
      if (msg.contains(emo)) {
        _awaitingReason = true;
        _currentEmotion = emo;
        return emocionesRespuestas[emo]![rng.nextInt(emocionesRespuestas[emo]!.length)];
      }
    }

    RegExp op = RegExp(r"(\d+(?:\.\d+)?)\s*([\+\-\*\/])\s*(\d+(?:\.\d+)?)");
    Match? m = op.firstMatch(msg);
    if (m != null) {
      double a = double.parse(m.group(1)!);
      double b = double.parse(m.group(3)!);
      switch (m.group(2)) {
        case '+':
          return "El resultado de $a + $b es ${(a + b).toStringAsFixed(2)} ‚úÖ";
        case '-':
          return "El resultado de $a - $b es ${(a - b).toStringAsFixed(2)} ‚úèÔ∏è";
        case '*':
          return "El resultado de $a √ó $b es ${(a * b).toStringAsFixed(2)} üí™";
        case '/':
          if (b == 0) return "No se puede dividir entre 0 üòÖ";
          return "El resultado de $a √∑ $b es ${(a / b).toStringAsFixed(2)} üí°";
      }
    }

    return [
      "Interesante ü§î, cu√©ntame un poco m√°s.",
      "Hmm, suena profundo. ¬øQuieres que hablemos m√°s de eso?",
      "Eso suena curioso üòÑ, cu√©ntame m√°s detalles.",
      "Guau, nunca hab√≠a pensado en eso as√≠.",
      "Cu√©ntame m√°s sobre eso, me interesa mucho escucharte."
    ][rng.nextInt(5)];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          SizedBox.expand(child: Image.asset('assets/images/fondologro1.jpg', fit: BoxFit.cover)),
          Positioned(
            top: 60,
            left: 0,
            right: 0,
            child: Stack(
              alignment: Alignment.center,
              children: [
                Lottie.asset('assets/animations/ini1.json', width: 120, height: 120, repeat: true),
                Lottie.asset('assets/animations/meditacion.json', width: 70, height: 70, repeat: true),
              ],
            ),
          ),
          SafeArea(
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white.withOpacity((0.05 + (_messages.length * 0.03)).clamp(0.05, 0.35)),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: Column(
                children: [
                  const SizedBox(height: 200),
                  Expanded(
                    child: ListView.builder(
                      controller: _scrollController,
                      padding: const EdgeInsets.symmetric(horizontal: 12),
                      itemCount: _messages.length,
                      itemBuilder: (context, index) {
                        final msg = _messages[index];
                        return Align(
                          alignment:
                              msg.isUser ? Alignment.centerRight : Alignment.centerLeft,
                          child: AnimatedContainer(
                            duration: const Duration(milliseconds: 300),
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 12),
                            margin: const EdgeInsets.symmetric(vertical: 6),
                            decoration: BoxDecoration(
                              color: msg.color?.withOpacity(0.9),
                              gradient: msg.gradient,
                              borderRadius: BorderRadius.circular(22),
                              boxShadow: [
                                BoxShadow(
                                    color: Colors.black26,
                                    blurRadius: 4,
                                    offset: const Offset(1, 2))
                              ],
                            ),
                            child: Text(
                              msg.text,
                              style: const TextStyle(
                                  color: Colors.black,
                                  fontSize: 16,
                                  fontFamily: "Montserrat"),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                  Padding(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                    child: Row(
                      children: [
                        Expanded(
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 6),
                            decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(24)),
                            child: TextField(
                              controller: _controller,
                              decoration: const InputDecoration(
                                  hintText: "Escribe un mensaje...",
                                  border: InputBorder.none),
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        GestureDetector(
                          onTap: _sendMessage,
                          child: Container(
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                                gradient: _selectedGradient,
                                shape: BoxShape.circle,
                                boxShadow: [
                                  BoxShadow(
                                      color: _selectedColor.withOpacity(0.7),
                                      blurRadius: 8,
                                      spreadRadius: 1)
                                ]),
                            child: const Icon(Icons.send_rounded,
                                color: Colors.white, size: 28),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 80,
            right: 20,
            child: GestureDetector(
              onTap: () => setState(() => _showColorPicker = !_showColorPicker),
              child: const Icon(Icons.palette_rounded,
                  color: Colors.white, size: 36),
            ),
          ),
          if (_showColorPicker)
            Positioned(
              bottom: 130,
              right: 10,
              child: GestureDetector(
                onTap: _pickCustomColor,
                child: Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(8)),
                  child: const Text("Personalizar color"),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Future<void> _sendMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    setState(() {
      _messages.add(_ChatMessage(
          text: text, isUser: true, gradient: _selectedGradient, color: null));
    });

    _controller.clear();

    await Future.delayed(const Duration(milliseconds: 150));

    final reply = await _generateBotResponse(text);

    setState(() {
      _messages.add(_ChatMessage(
          text: reply,
          isUser: false,
          color: Colors.white.withOpacity(0.85),
          gradient: null));
    });

    await Future.delayed(const Duration(milliseconds: 150));
    _scrollController.animateTo(
      _scrollController.position.maxScrollExtent + 80,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }
}

class _ChatMessage {
  final String text;
  final bool isUser;
  final Color? color;
  final Gradient? gradient;

  _ChatMessage({required this.text, required this.isUser, this.color, this.gradient});
}
